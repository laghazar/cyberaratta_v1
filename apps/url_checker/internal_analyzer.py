"""
URL-’∂’•÷Ä’´ ’∂’•÷Ä÷Ñ’´’∂ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°’Ø’°÷Ä’£
’ï’£’ø’°’£’∏÷Ä’Æ’æ’∏÷Ç’¥ ’ß ’•÷Ä’¢ API-’∂’•÷Ä’® ’π’•’∂ ’∞’°’µ’ø’∂’°’¢’•÷Ä’∏÷Ç’¥ URL-’®
"""

import re
import ssl
import socket
import requests
from urllib.parse import urlparse
from datetime import datetime, timedelta
import ipaddress

# Optional imports with fallbacks
try:
    import whois
    WHOIS_AVAILABLE = True
except ImportError:
    WHOIS_AVAILABLE = False
    
try:
    import dns.resolver
    DNS_AVAILABLE = True
except ImportError:
    DNS_AVAILABLE = False

class InternalURLAnalyzer:
    """’Ü’•÷Ä÷Ñ’´’∂ URL ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’Ø’¨’°’Ω"""
    
    def __init__(self):
        self.suspicious_patterns = [
            # Phishing ÷á scam patterns
            r'[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}',  # IP ’∞’°’Ω÷Å’•’∂’•÷Ä
            r'[a-z0-9-]+\.tk$|[a-z0-9-]+\.ml$|[a-z0-9-]+\.ga$',  # ‘±’∂’æ’≥’°÷Ä TLD-’∂’•÷Ä
            r'[a-z0-9-]+(paypal|bank|secure|login|account)[a-z0-9-]*\.',  # Phishing ’¢’°’º’•÷Ä
            r'[a-z0-9-]+(microsoft|google|apple|amazon)[a-z0-9-]*\.',  # Brand impersonation
            r'[a-z0-9-]+(facebook|instagram|twitter)[a-z0-9-]*\.',  # Social media phishing
            r'[a-z0-9-]+(arca|idram|teller)[a-z0-9-]*\.',  # ’Ä’°’µ’Ø’°’Ø’°’∂ ÷Ü’´’∂’°’∂’Ω’°’Ø’°’∂
            r'[a-z0-9-]+(beeline|ucom|viva|vivacell)[a-z0-9-]*\.',  # ’Ä’°’µ’Ø’°’Ø’°’∂ ÷Ö’∫’•÷Ä’°’ø’∏÷Ä’∂’•÷Ä
            r'[0-9]{3,}[a-z]+[0-9]+',  # ‘ø’°’Ω’Ø’°’Æ’•’¨’´ ’¥’´’ª’∏÷Å’°’º’∏÷Ç’¥’∂’•÷Ä
            r'[a-z]+[0-9]{3,}[a-z]*',  # ‘ø’°’Ω’Ø’°’Æ’•’¨’´ ’∞’°’¥’°’Ø÷Å’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä
            r'[a-z]+-[a-z]+-[0-9]+',   # ‘ø’°’Ω’Ø’°’Æ’•’¨’´ ’£’Æ’´’Ø’°’µ’´’∂ ’Ø’°’∫’•÷Ä
            r'[a-z]{1,3}[0-9]{2,}',    # ‘ø’°÷Ä’≥ ’∞’°’æ’•’¨’∏÷Ç’¥’∂’•÷Ä ’¥’•’Æ ’©’æ’•÷Ä’∏’æ
        ]
        
        self.trusted_tlds = [
            '.am', '.com', '.org', '.net', '.edu', '.gov', '.mil',
            '.co.uk', '.de', '.fr', '.jp', '.ca', '.au', '.ru', '.cn'
        ]
        
        self.suspicious_tlds = [
            '.tk', '.ml', '.ga', '.cf', '.gq', '.pw', '.top',
            '.download', '.click', '.link', '.review', '.country'
        ]
        
        self.armenian_trusted_domains = [
            'gov.am', 'cba.am', 'ardshinbank.am', 'acba.am', 'ameriabank.am',
            'araratbank.am', 'byblosbank.am', 'hsbc.am', 'inecobank.am',
            'unibank.am', 'vtb.am', 'evocabank.am', 'idbank.am',
            'beeline.am', 'ucom.am', 'viva-mts.am', 'vivacell.am',
            'armentel.am', 'arca.am', 'idram.am', 'telcell.am',
            'ysu.am', 'aua.am', 'asue.am', 'seua.am', 'nuas.am'
        ]

    def analyze_url(self, url):
        """‘±’¥’¢’∏’≤’ª’°’Ø’°’∂ URL ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’∏÷Ç’∂"""
        results = {
            'url': url,
            'risk_score': 0,
            'max_risk_score': 100,
            'findings': [],
            'recommendations': [],
            'ssl_info': {},
            'domain_info': {},
            'content_analysis': {},
            'technical_details': {},
            'status': 'unknown'
        }
        
        try:
            # 1. URL-’´ ’Ø’°’º’∏÷Ç÷Å’æ’°’Æ÷Ñ’´ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’∏÷Ç’∂
            self._analyze_url_structure(url, results)
            
            # 2. SSL ’Ω’•÷Ä’ø’´÷Ü’´’Ø’°’ø’´ ’Ω’ø’∏÷Ç’£’∏÷Ç’¥
            self._check_ssl_certificate(url, results)
            
            # 3. ‘¥’∏’¥’•’∂’´ ’ø’•’≤’•’Ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’Ω’ø’∏÷Ç’£’∏÷Ç’¥
            self._check_domain_info(url, results)
            
            # 4. DNS records ’Ω’ø’∏÷Ç’£’∏÷Ç’¥
            self._check_dns_records(url, results)
            
            # 5. ‘≤’∏’æ’°’∂’§’°’Ø’∏÷Ç’©’µ’°’∂ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’∏÷Ç’∂ (’•’©’• ’∞’∂’°÷Ä’°’æ’∏÷Ä ’ß)
            self._analyze_content(url, results)
            
            # 6. ’é’•÷Ä’ª’∂’°’Ø’°’∂ ’£’∂’°’∞’°’ø’∏÷Ç’¥
            self._calculate_final_assessment(results)
            
        except Exception as e:
            results['findings'].append(f"’é’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’Ω’≠’°’¨: {str(e)}")
            results['risk_score'] = 50  # ’Ñ’´’ª’´’∂ ’º’´’Ω’Ø ’°’∂’∞’°’µ’ø ’Ω’≠’°’¨’∂’•÷Ä’´ ’§’•’∫÷Ñ’∏÷Ç’¥
            
        return results

    def _analyze_url_structure(self, url, results):
        """URL-’´ ’Ø’°’º’∏÷Ç÷Å’æ’°’Æ÷Ñ’´ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’∏÷Ç’∂"""
        parsed = urlparse(url)
        domain = parsed.netloc.lower()
        path = parsed.path.lower()
        
        # ’Ä’°’µ’Ø’°’Ø’°’∂ ’æ’Ω’ø’°’∞’•’¨’´ ’§’∏’¥’•’∂’∂’•÷Ä
        if any(domain.endswith(trusted) for trusted in self.armenian_trusted_domains):
            results['findings'].append("‚úÖ ’Ä’°’µ’Ø’°’Ø’°’∂ ’∫’°’∑’ø’∏’∂’°’Ø’°’∂ ’Ø’°’¥ ’∞’°’µ’ø’∂’´ ’æ’Ω’ø’°’∞’•’¨’´ ’Ø’°’µ÷Ñ (’¢’°’∂’Ø, ’£’∏÷Ä’Æ’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂, ÷Ö’∫’•÷Ä’°’ø’∏÷Ä)")
            results['risk_score'] -= 30
            return
        
        # IP ’∞’°’Ω÷Å’• ÷É’∏’≠’°÷Ä’•’∂ ’§’∏’¥’•’∂’´
        try:
            ipaddress.ip_address(domain.split(':')[0])
            results['findings'].append("‚ö†Ô∏è ‘ø’°’µ÷Ñ’® ÷Ö’£’ø’°’£’∏÷Ä’Æ’∏÷Ç’¥ ’ß IP ’∞’°’Ω÷Å’• ’Ø’°’µ÷Ñ’´ ’°’∂’æ’°’∂ ÷É’∏’≠’°÷Ä’•’∂ - ’Ω’° ’Ø’°’Ω’Ø’°’Æ’•’¨’´ ’ß")
            results['risk_score'] += 25
        except ValueError:
            pass
        
        # ‘ø’°’Ω’Ø’°’Æ’•’¨’´ patterns
        for pattern in self.suspicious_patterns:
            if re.search(pattern, domain + path):
                results['findings'].append(f"‚ö†Ô∏è ‘ø’°’µ÷Ñ’´ ’°’∂’∏÷Ç’∂’® ’Ø’°’¥ ’∞’°’Ω÷Å’•’∂ ’∏÷Ç’∂’´ ’Ø’°’Ω’Ø’°’Æ’•’¨’´ ’ø’°÷Ä÷Ä’•÷Ä (÷Ö÷Ä‚Ä§ ÷Ü’•’µ÷Ñ ’¢’°’∂’Ø’´ ’°’∂’∏÷Ç’∂’∂’•÷Ä)")
                results['risk_score'] += 15
                break
        
        # TLD ’Ω’ø’∏÷Ç’£’∏÷Ç’¥
        tld = '.' + domain.split('.')[-1] if '.' in domain else ''
        if tld in self.suspicious_tlds:
            results['findings'].append(f"üö® ’ï’£’ø’°’£’∏÷Ä’Æ’æ’∏÷Ç’¥ ’ß ’Ø’°’Ω’Ø’°’Æ’•’¨’´ ’Ø’°’µ÷Ñ’°’µ’´’∂ ’®’∂’§’°÷Ä’±’°’Ø’∏÷Ç’¥: {tld} (’∞’°’≥’°’≠ ÷Ö’£’ø’°’£’∏÷Ä’Æ’æ’∏÷Ç’¥ ’ß ’≠’°÷Ä’§’°’≠’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’∞’°’¥’°÷Ä)")
            results['risk_score'] += 20
        elif tld in self.trusted_tlds:
            results['findings'].append(f"‚úÖ ’é’Ω’ø’°’∞’•’¨’´ ’Ø’°’µ÷Ñ’°’µ’´’∂ ’®’∂’§’°÷Ä’±’°’Ø’∏÷Ç’¥: {tld} (÷Ö÷Ä‚Ä§ .com, .am, .org)")
            results['risk_score'] -= 5
        
        # HTTPS ’Ω’ø’∏÷Ç’£’∏÷Ç’¥
        if parsed.scheme != 'https':
            results['findings'].append("‚ö†Ô∏è ‘ø’°’µ÷Ñ’® ’π’´ ÷Ö’£’ø’°’£’∏÷Ä’Æ’∏÷Ç’¥ ’°’∂’æ’ø’°’∂’£ ’Ø’°’∫ (HTTP) - ’ø’æ’µ’°’¨’∂’•÷Ä’® ’Ø’°÷Ä’∏’≤ ’•’∂ ’£’∏’≤’°÷Å’æ’•’¨")
            results['risk_score'] += 15
        else:
            results['findings'].append("‚úÖ ‘ø’°’µ÷Ñ’® ÷Ö’£’ø’°’£’∏÷Ä’Æ’∏÷Ç’¥ ’ß ’°’∂’æ’ø’°’∂’£ ’Ø’°’∫ (HTTPS) - ’¨’°’æ ’∂’∑’°’∂")
            results['risk_score'] -= 5
        
        # URL-’´ ’•÷Ä’Ø’°÷Ä’∏÷Ç’©’µ’∏÷Ç’∂
        if len(url) > 100:
            results['findings'].append("‚ö†Ô∏è ’á’°’ø ’•÷Ä’Ø’°÷Ä ’Ø’°’µ÷Ñ’°’µ’´’∂ ’∞’°’Ω÷Å’• - ’∞’°’≥’°’≠ ÷Ö’£’ø’°’£’∏÷Ä’Æ’æ’∏÷Ç’¥ ’ß ’≠’°’¢’•’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä")
            results['risk_score'] += 10
        
        # ‘ø’°’Ω’Ø’°’Æ’•’¨’´ ’∫’°÷Ä’°’¥’•’ø÷Ä’•÷Ä
        if any(param in url.lower() for param in ['download', 'install', 'update', 'verify', 'confirm']):
            results['findings'].append("‚ö†Ô∏è ’Ä’°’Ω÷Å’•’∏÷Ç’¥ ’Ø’°’∂ ’Ø’°’Ω’Ø’°’Æ’•’¨’´ ’¢’°’º’•÷Ä (’∂’•÷Ä’¢’•’º’∂’•’¨, ’ø’•’≤’°’§÷Ä’•’¨, ’Ω’ø’∏÷Ç’£’•’¨) - ’¶’£’∏÷Ç’µ’∑ ’•’≤’•÷Ñ")
            results['risk_score'] += 10

    def _check_ssl_certificate(self, url, results):
        """SSL ’Ω’•÷Ä’ø’´÷Ü’´’Ø’°’ø’´ ’Ω’ø’∏÷Ç’£’∏÷Ç’¥"""
        parsed = urlparse(url)
        if parsed.scheme != 'https':
            return
            
        try:
            hostname = parsed.netloc.split(':')[0]
            context = ssl.create_default_context()
            
            with socket.create_connection((hostname, 443), timeout=10) as sock:
                with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                    cert = ssock.getpeercert()
                    
                    # ’ç’•÷Ä’ø’´÷Ü’´’Ø’°’ø’´ ’æ’°’æ’•÷Ä’∏÷Ç’©’µ’∏÷Ç’∂
                    not_after = datetime.strptime(cert['notAfter'], '%b %d %H:%M:%S %Y %Z')
                    days_until_expiry = (not_after - datetime.now()).days
                    
                    results['ssl_info'] = {
                        'valid': True,
                        'issuer': dict(x[0] for x in cert['issuer']),
                        'subject': dict(x[0] for x in cert['subject']),
                        'expires': cert['notAfter'],
                        'days_until_expiry': days_until_expiry
                    }
                    
                    if days_until_expiry < 30:
                        results['findings'].append(f"‚ö†Ô∏è ‘±’∂’æ’ø’°’∂’£’∏÷Ç’©’µ’°’∂ ’æ’Ø’°’µ’°’Ø’°’∂’® ’∑’∏÷Ç’ø’∏’æ ’Ø’°’æ’°÷Ä’ø’æ’´ ({days_until_expiry} ÷Ö÷Ä)")
                        results['risk_score'] += 10
                    elif days_until_expiry < 0:
                        results['findings'].append("üö® ‘±’∂’æ’ø’°’∂’£’∏÷Ç’©’µ’°’∂ ’æ’Ø’°’µ’°’Ø’°’∂’® ’°’æ’°÷Ä’ø’æ’•’¨ ’ß - ’¥’´ ’°’µ÷Å’•’¨’•÷Ñ")
                        results['risk_score'] += 25
                    else:
                        results['findings'].append(f"‚úÖ ’é’°’æ’•÷Ä ’°’∂’æ’ø’°’∂’£’∏÷Ç’©’µ’°’∂ ’æ’Ø’°’µ’°’Ø’°’∂ ({days_until_expiry} ÷Ö÷Ä ’¥’∂’°÷Å’•’¨ ’ß)")
                        results['risk_score'] -= 10
                        
        except Exception as e:
            results['findings'].append(f"‚ùå ’â’Ø’°÷Ä’∏’≤’°÷Å’°’∂÷Ñ ’Ω’ø’∏÷Ç’£’•’¨ ’°’∂’æ’ø’°’∂’£’∏÷Ç’©’µ’°’∂ ’æ’Ø’°’µ’°’Ø’°’∂’® - ’Ø’°÷Ä’∏’≤ ’ß ’≠’∂’§’´÷Ä ’¨’´’∂’•’¨")
            results['risk_score'] += 15
            results['ssl_info'] = {'valid': False, 'error': str(e)}

    def _check_domain_info(self, url, results):
        """‘¥’∏’¥’•’∂’´ WHOIS ’ø’•’≤’•’Ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’Ω’ø’∏÷Ç’£’∏÷Ç’¥"""
        if not WHOIS_AVAILABLE:
            results['findings'].append("‚ÑπÔ∏è ‘ø’°’µ÷Ñ’´ ’£÷Ä’°’∂÷Å’¥’°’∂ ’ø’°÷Ä’•’©’æ’´ ’Ω’ø’∏÷Ç’£’∏÷Ç’¥’® ’∞’°’Ω’°’∂’•’¨’´ ’π’ß")
            return
            
        try:
            parsed = urlparse(url)
            domain = parsed.netloc.split(':')[0]
            
            # ’Ä’•’º’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ subdomain-’∂’•÷Ä’®
            domain_parts = domain.split('.')
            if len(domain_parts) > 2:
                domain = '.'.join(domain_parts[-2:])
            
            w = whois.whois(domain)
            
            if w.creation_date:
                creation_date = w.creation_date[0] if isinstance(w.creation_date, list) else w.creation_date
                age_days = (datetime.now() - creation_date).days
                age_years = age_days // 365
                
                results['domain_info'] = {
                    'creation_date': creation_date.strftime('%Y-%m-%d'),
                    'age_days': age_days,
                    'registrar': w.registrar,
                    'country': w.country
                }
                
                if age_days < 30:
                    results['findings'].append("üö® ’á’°’ø ’∂’∏÷Ä ’Ø’°’µ÷Ñ (’Ω’ø’•’≤’Æ’æ’•’¨ ’ß 1 ’°’¥’Ω’´÷Å ’∫’°’Ø’°’Ω ’°’º’°’ª) - ’≠’∏÷Ç’Ω’°÷É’•÷Ñ")
                    results['risk_score'] += 30
                elif age_days < 90:
                    results['findings'].append("‚ö†Ô∏è ’Ä’°’¥’•’¥’°’ø’°’¢’°÷Ä ’∂’∏÷Ä ’Ø’°’µ÷Ñ (3 ’°’¥’Ω’´÷Å ’∫’°’Ø’°’Ω) - ’¶’£’∏÷Ç’µ’∑ ’•’≤’•÷Ñ")
                    results['risk_score'] += 15
                elif age_years >= 1:
                    results['findings'].append(f"‚úÖ ’Ä’°’Ω’ø’°’ø’æ’°’Æ ’Ø’°’µ÷Ñ (’£’∏÷Ä’Æ’∏÷Ç’¥ ’ß {age_years} ’ø’°÷Ä’´)")
                    results['risk_score'] -= 10
                else:
                    results['findings'].append(f"‚úÖ ’Ä’°’Ω’ø’°’ø’æ’°’Æ ’Ø’°’µ÷Ñ (’£’∏÷Ä’Æ’∏÷Ç’¥ ’ß {age_days} ÷Ö÷Ä)")
                    results['risk_score'] -= 5
                    
        except Exception as e:
            results['findings'].append(f"‚ÑπÔ∏è ’â’Ø’°÷Ä’∏’≤’°÷Å’°’∂÷Ñ ’Ω’ø’∏÷Ç’£’•’¨ ’Ø’°’µ÷Ñ’´ ’£÷Ä’°’∂÷Å’¥’°’∂ ’ø’°÷Ä’•’©’´’æ’®")
            results['domain_info'] = {'error': str(e)}

    def _check_dns_records(self, url, results):
        """DNS records-’´ ’Ω’ø’∏÷Ç’£’∏÷Ç’¥"""
        if not DNS_AVAILABLE:
            results['findings'].append("‚ÑπÔ∏è ’ë’°’∂÷Å’°’µ’´’∂ ’ø’•’≤’•’Ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’Ω’ø’∏÷Ç’£’∏÷Ç’¥’® ’∞’°’Ω’°’∂’•’¨’´ ’π’ß")
            return
            
        try:
            parsed = urlparse(url)
            domain = parsed.netloc.split(':')[0]
            
            # A record ’Ω’ø’∏÷Ç’£’∏÷Ç’¥
            try:
                a_records = dns.resolver.resolve(domain, 'A')
                ip_addresses = [str(record) for record in a_records]
                results['technical_details']['ip_addresses'] = ip_addresses
                
                # ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ IP-’∂’•÷Ä’´ ’£’•’∏’¨’∏’Ø’°÷Å’´’°’∂
                for ip in ip_addresses:
                    if ipaddress.ip_address(ip).is_private:
                        results['findings'].append("‚ö†Ô∏è ‘ø’°’µ÷Ñ’® ÷Ö’£’ø’°’£’∏÷Ä’Æ’∏÷Ç’¥ ’ß ’∂’•÷Ä÷Ñ’´’∂ ÷Å’°’∂÷Å’°’µ’´’∂ ’∞’°’Ω÷Å’• - ’Ø’°÷Ä’∏’≤ ’ß ’≠’∂’§’´÷Ä ’¨’´’∂’•’¨")
                        results['risk_score'] += 20
                        
            except Exception as e:
                results['findings'].append("‚ö†Ô∏è ’â’Ø’°÷Ä’∏’≤’°÷Å’°’∂÷Ñ ’£’ø’∂’•’¨ ’Ø’°’µ÷Ñ’´ ÷Å’°’∂÷Å’°’µ’´’∂ ’∞’°’Ω÷Å’•’∂")
                results['risk_score'] += 10
            
            # MX record ’Ω’ø’∏÷Ç’£’∏÷Ç’¥ (email-’´ ’∞’°’¥’°÷Ä)
            try:
                mx_records = dns.resolver.resolve(domain, 'MX')
                results['technical_details']['has_mx'] = True
                results['findings'].append("‚úÖ ‘ø’°’µ÷Ñ’® ’∏÷Ç’∂’´ ’ß’¨‚Ä§÷É’∏’Ω’ø’´ ’Æ’°’º’°’µ’∏÷Ç’©’µ’∏÷Ç’∂ - ’¨’°’æ ’∂’∑’°’∂")
            except:
                results['technical_details']['has_mx'] = False
                
        except Exception as e:
            results['findings'].append(f"‚ÑπÔ∏è ’â’Ø’°÷Ä’∏’≤’°÷Å’°’∂÷Ñ ’Ω’ø’∏÷Ç’£’•’¨ ÷Å’°’∂÷Å’°’µ’´’∂ ’ø’•’≤’•’Ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’®")

    def _analyze_content(self, url, results):
        """‘≤’∏’æ’°’∂’§’°’Ø’∏÷Ç’©’µ’°’∂ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’∏÷Ç’∂"""
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            response = requests.get(url, headers=headers, timeout=10, verify=False)
            content = response.text.lower()
            
            # ‘ø’°’Ω’Ø’°’Æ’•’¨’´ ’¢’°’º’•÷Ä
            suspicious_words = [
                'verify your account', 'update payment', 'suspended account',
                'click here now', 'limited time', 'urgent action required',
                'congratulations', 'you have won', 'claim your prize',
                'verify identity', 'confirm information', 'security alert',
                '’Ω’ø’∏÷Ç’£’•÷Ñ ’±’•÷Ä ’∞’°’∑’´’æ’®', '’©’°÷Ä’¥’°÷Å÷Ä’•÷Ñ ’ø’æ’µ’°’¨’∂’•÷Ä’®', '’°’∂’æ’ø’°’∂’£’∏÷Ç’©’µ’°’∂ ’°’¶’§’°’∂’∑’°’∂'
            ]
            
            suspicious_count = sum(1 for word in suspicious_words if word in content)
            if suspicious_count > 2:
                results['findings'].append(f"üö® ‘ø’°’µ÷Ñ’∏÷Ç’¥ ’£’ø’∂’æ’•’¨ ’ß {suspicious_count} ’Ø’°’Ω’Ø’°’Æ’•’¨’´ ’°÷Ä’ø’°’∞’°’µ’ø’∏÷Ç’©’µ’∏÷Ç’∂ (÷Ö÷Ä‚Ä§ ¬´’Ω’ø’∏÷Ç’£’•÷Ñ ’±’•÷Ä ’∞’°’∑’´’æ’®¬ª)")
                results['risk_score'] += suspicious_count * 5
            
            # JavaScript redirection
            if 'window.location' in content or 'document.location' in content:
                results['findings'].append("‚ö†Ô∏è ‘ø’°’µ÷Ñ’® ’∏÷Ç’∂’´ ’°’æ’ø’∏’¥’°’ø ’æ’•÷Ä’°’∏÷Ç’≤’≤’∏÷Ä’§’∏÷Ç’¥ - ’Ø’°÷Ä’∏’≤ ’ß ’Ø’°’Ω’Ø’°’Æ’•’¨’´ ’¨’´’∂’•’¨")
                results['risk_score'] += 10
            
            # ’ñ’∏÷Ä’¥’•÷Ä’´ ’Ω’ø’∏÷Ç’£’∏÷Ç’¥
            if '<form' in content and ('password' in content or 'login' in content):
                results['findings'].append("‚ÑπÔ∏è ‘ø’°’µ÷Ñ’∏÷Ç’¥ ’Ø’° ’¥’∏÷Ç’ø÷Ñ’´ ÷Ü’∏÷Ä’¥ - ’¶’£’∏÷Ç’µ’∑ ’•’≤’•÷Ñ ’£’°’≤’ø’∂’°’¢’°’º ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨’´’Ω")
                results['risk_score'] += 5
                
            results['content_analysis'] = {
                'status_code': response.status_code,
                'content_length': len(content),
                'suspicious_words_found': suspicious_count
            }
            
        except Exception as e:
            results['findings'].append(f"‚ÑπÔ∏è ’â’Ø’°÷Ä’∏’≤’°÷Å’°’∂÷Ñ ’Ω’ø’∏÷Ç’£’•’¨ ’Ø’°’µ÷Ñ’´ ’¢’∏’æ’°’∂’§’°’Ø’∏÷Ç’©’µ’∏÷Ç’∂’®")

    def _calculate_final_assessment(self, results):
        """’é’•÷Ä’ª’∂’°’Ø’°’∂ ’£’∂’°’∞’°’ø’¥’°’∂ ’∞’°’∑’æ’°÷Ä’Ø"""
        risk_score = max(0, min(100, results['risk_score']))
        results['risk_score'] = risk_score
        
        if risk_score <= 20:
            results['status'] = 'safe'
            results['recommendations'].append("‚úÖ ‘ø’°’µ÷Ñ’® ’©’æ’∏÷Ç’¥ ’ß ’°’¥’¢’∏’≤’ª’∏’æ’´’∂ ’°’∂’æ’ø’°’∂’£ - ’Ø’°÷Ä’∏’≤ ’•÷Ñ ’°’µ÷Å’•’¨’•’¨")
        elif risk_score <= 40:
            results['status'] = 'low_risk'
            results['recommendations'].append("‚ö†Ô∏è ’ë’°’Æ÷Ä ’º’´’Ω’Ø - ’Ø’°÷Ä’∏’≤ ’•÷Ñ ’°’µ÷Å’•’¨’•’¨, ’¢’°’µ÷Å ’¶’£’∏÷Ç’µ’∑ ’•’≤’•÷Ñ")
        elif risk_score <= 60:
            results['status'] = 'medium_risk'
            results['recommendations'].append("‚ö†Ô∏è ’Ñ’´’ª’´’∂ ’º’´’Ω’Ø - ’≠’∏÷Ç’Ω’°÷É’•÷Ñ ’°’∂’±’∂’°’Ø’°’∂ ’ø’æ’µ’°’¨’∂’•÷Ä (’£’°’≤’ø’∂’°’¢’°’º, ÷Ñ’°÷Ä’ø’´ ’ø’æ’µ’°’¨’∂’•÷Ä) ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨’∏÷Ç÷Å")
        elif risk_score <= 80:
            results['status'] = 'high_risk'
            results['recommendations'].append("üö® ‘≤’°÷Ä’±÷Ä ’º’´’Ω’Ø - ‘¥’à’õ’í÷Ñ ’π’ß ’°’µ÷Å’•’¨’•’¨ ’°’µ’Ω ’Ø’°’µ÷Ñ’®")
        else:
            results['status'] = 'very_high_risk'
            results['recommendations'].append("üö® ’á’°’ø ’¢’°÷Ä’±÷Ä ’º’´’Ω’Ø - ‘±’ê‘≥‘µ‘º’é’à’í’Ñ ‘∑ ’°’µ÷Å’•’¨’•’¨ ’°’µ’Ω ’Ø’°’µ÷Ñ’®")
        
        # ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’°’º’°’ª’°÷Ä’Ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä
        results['recommendations'].extend([
            "üìã ’Ñ’°’∂÷Ä’°’¥’°’Ω’∂ ’∫’°’ø’°’Ω’≠’°’∂’® ’Ø’Ω’ø’°’∂’°÷Ñ 3 ’°’∑’≠’°’ø’°’∂÷Ñ’°’µ’´’∂ ÷Ö÷Ä’æ’° ’®’∂’©’°÷Å÷Ñ’∏÷Ç’¥",
            "üîç ’Ñ’•÷Ä ’¥’°’Ω’∂’°’£’•’ø’∂’•÷Ä’® ’Ø’°’∂’•’∂ ’°’æ’•’¨’´ ’≠’∏÷Ä’® ’Ω’ø’∏÷Ç’£’∏÷Ç’¥",
            "üìû ‘ø’°’Ω’Ø’°’Æ’´ ’§’•’∫÷Ñ’∏÷Ç’¥ ’°’∂’∫’°’µ’¥’°’∂ ’Ø’°’∫’æ’•÷Ñ ’¥’•’¶ ’∞’•’ø"
        ])

def analyze_unknown_url(url):
    """’Ä’´’¥’∂’°’Ø’°’∂ ÷Ü’∏÷Ç’∂’Ø÷Å’´’° ’°’∂’∞’°’µ’ø URL-’∂’•÷Ä’´ ’æ’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä"""
    analyzer = InternalURLAnalyzer()
    result = analyzer.analyze_url(url)
    
    # ‘±’æ’•’¨’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’∫’°÷Ä’¶ ’¢’°÷Å’°’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä
    result['simple_explanation'] = get_simple_risk_explanation(result['risk_score'])
    result['safety_tips'] = get_safety_tips(result['status'])
    
    return result

def get_simple_risk_explanation(risk_score):
    """’ä’°÷Ä’¶ ’¢’°÷Å’°’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ’º’´’Ω’Ø’´ ’£’∂’°’∞’°’ø’¥’°’∂ ’¥’°’Ω’´’∂"""
    if risk_score <= 20:
        return "‘ø’°’µ÷Ñ’® ’©’æ’∏÷Ç’¥ ’ß ’°’∂’æ’ø’°’∂’£: ’Ñ’•÷Ä ’Ω’ø’∏÷Ç’£’∏÷Ç’¥’∂’•÷Ä’® ’Ø’ø’°÷Ä’∏’≤’°’Ø’°’∂ ’≠’∂’§’´÷Ä’∂’•÷Ä ’π’•’∂ ’∞’°’µ’ø’∂’°’¢’•÷Ä’•’¨:"
    elif risk_score <= 40:
        return "‘ø’°’µ÷Ñ’® ’∏÷Ç’∂’´ ’¥’´’°’µ’∂ ’¥’´ ÷Ñ’°’∂’´ ÷É’∏÷Ñ÷Ä ’Ø’°’Ω’Ø’°’Æ’•’¨’´ ’∞’°’ø’Ø’°’∂’´’∑: ’Ä’°’æ’°’∂’°’¢’°÷Ä ’°’∂’æ’ø’°’∂’£ ’ß, ’¢’°’µ÷Å ’¶’£’∏÷Ç’µ’∑ ’•’≤’•÷Ñ:"
    elif risk_score <= 60:
        return "‘ø’°’µ÷Ñ’® ’∏÷Ç’∂’´ ’¥’´ ÷Ñ’°’∂’´ ’Ø’°’Ω’Ø’°’Æ’•’¨’´ ’∞’°’ø’Ø’°’∂’´’∑: ’Ñ’´ ’ø’æ’•÷Ñ ’±’•÷Ä ’°’∂’±’∂’°’Ø’°’∂ ’ø’æ’µ’°’¨’∂’•÷Ä’® (’£’°’≤’ø’∂’°’¢’°’º, ÷Ñ’°÷Ä’ø):"
    elif risk_score <= 80:
        return "‘ø’°’µ÷Ñ’® ’∏÷Ç’∂’´ ’∑’°’ø ’Ø’°’Ω’Ø’°’Æ’•’¨’´ ’∞’°’ø’Ø’°’∂’´’∑’∂’•÷Ä: ‘Ω’∏÷Ä’∞’∏÷Ç÷Ä’§ ’π’•’∂÷Ñ ’ø’°’¨’´’Ω ’°’µ÷Å’•’¨’•’¨:"
    else:
        return "‘ø’°’µ÷Ñ’® ’∑’°’ø ’æ’ø’°’∂’£’°’æ’∏÷Ä ’ß: ‘≤’°÷Å’°÷Ä’±’°’Ø’°’∫’•’Ω ’¥’´ ’°’µ÷Å’•’¨’•÷Ñ:"

def get_safety_tips(status):
    """‘±’∂’æ’ø’°’∂’£’∏÷Ç’©’µ’°’∂ ’≠’∏÷Ä’∞’∏÷Ç÷Ä’§’∂’•÷Ä`’Ø’°’≠’æ’°’Æ ’Ø’°÷Ä’£’°’æ’´’≥’°’Ø’´÷Å"""
    tips = [
        "üí° ‘µ÷Ä’¢’•÷Ñ ’¥’´ ’ø’æ’•÷Ñ ’±’•÷Ä ’£’°’≤’ø’∂’°’¢’°’º’® ’°’∂’Æ’°’∂’∏’© ’Ø’°’µ÷Ñ’•÷Ä’∏÷Ç’¥",
        "üîí ’ç’ø’∏÷Ç’£’•÷Ñ, ’∏÷Ä ’Ø’°’µ÷Ñ’® ’Ω’Ø’Ω’æ’∏÷Ç’¥ ’ß https://-’∏’æ",
        "üì± ‘ø’°’Ω’Ø’°’Æ’´ ’§’•’∫÷Ñ’∏÷Ç’¥ ’≠’∏÷Ä’∞÷Ä’§’°’Ø÷Å’•÷Ñ IT ’¥’°’Ω’∂’°’£’•’ø’´ ’∞’•’ø"
    ]
    
    if status in ['high_risk', 'very_high_risk']:
        tips.extend([
            "üö® ‘±’∂’¥’´’ª’°’∫’•’Ω ÷É’°’Ø’•÷Ñ ’°’µ’Ω ’Ø’°’µ÷Ñ’®",
            "‚ö†Ô∏è ’Ñ’´ ’∂’•÷Ä’¢’•’º’∂’•÷Ñ ÷Ü’°’µ’¨’•÷Ä ’°’µ’Ω ’Ø’°’µ÷Ñ’´÷Å",
            "üìû ‘µ’©’• ’°÷Ä’§’•’∂ ’ø’æ’•’¨ ’•÷Ñ ’ø’æ’µ’°’¨’∂’•÷Ä, ÷É’∏’≠’•÷Ñ ’£’°’≤’ø’∂’°’¢’°’º’∂’•÷Ä’®"
        ])
    elif status == 'medium_risk':
        tips.extend([
            "üîç ’ç’ø’∏÷Ç’£’•÷Ñ ’Ø’°’µ÷Ñ’´ ’°’∂’∏÷Ç’∂’®` ’ø’°’º’°’Ω’≠’°’¨’∂’•÷Ä’´ ’∞’°’¥’°÷Ä",
            "‚ùå ’Ñ’´ ’£’∏÷Ä’Æ’°÷Ä’Ø’•÷Ñ ÷Ü’°’µ’¨’•÷Ä ’°’µ’Ω ’Ø’°’µ÷Ñ’´÷Å"
        ])
    elif status in ['safe', 'low_risk']:
        tips.extend([
            "‚úÖ ‘ø’°’µ÷Ñ’® ’©’æ’∏÷Ç’¥ ’ß ’°’∂’æ’ø’°’∂’£",
            "üîÑ ‘≤’°’µ÷Å ’¥’´’∑’ø ’¶’£’∏÷Ç’µ’∑ ’•’≤’•÷Ñ ÷Ö’∂’¨’°’µ’∂ ’£’∏÷Ä’Æ’∏÷Ç’∂’•’∏÷Ç’©’µ’°’∂ ’™’°’¥’°’∂’°’Ø"
        ])
    
    return tips
